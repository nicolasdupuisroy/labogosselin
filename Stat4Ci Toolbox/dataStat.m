function metCriteria = dataStat(cid, incCriteria)% DATASTAT display on screen a number of useful statistics about the input data matrix -- main% 	output of the READCID function -- satisfying the Boolean inclusion criterias specified in % 	the cell of strings incCriteria. In incCriteria, the expression 'data(n,:)' refers to the % 	nth data column.% 		E.g., [data, origins, info, noise, dataLabels] = readCid('AGBTSD04.cid');% 			  incCriteria{1} = '(data(2,:)==1)'; %2nd data columns = 1% 			  incCriteria{2} = '(data(2,:)==1)&(data(3,:)==1)'; %2nd and 3rd data columns = 1% 			  predVar = [8, 10];% 			  metCriteria = someStat(data, incCriteria);% 	If incCriteria contains n elements, the metCriteria matrix will have a size of n*nb of rows% 	in the data input matrix, containing 1 for the rows of the data input matrix included and 0 % 	otherwise.% % See also READCI, DEMO4CI% % The Stat4Ci toolbox is free (http://mapageweb.umontreal.ca/gosselif/stat4ci.html); if you use % it in your research, please, cite us:%	Chauvin, A., Worsley, K. J., Schyns, P. G., Arguin, M. & Gosselin, F. (2004).  A sensitive %	statistical test for smooth classification images.% % Alan Chauvin & Frédéric Gosselin (frederic.gosselin@umontreal.ca), 27/08/2004% bug on C10 and on...data = cid.data;[nbColumns, nbTrials] = size(data);[nothing, nbIncCriteria] = size(incCriteria);includedData = cell(1, nbIncCriteria);metCriteria = zeros(nbIncCriteria, nbTrials);for whichIncCriteria = 1:nbIncCriteria,	outputStr = incCriteria{whichIncCriteria};	for ii = 1:nbColumns,		outputStr = replaceStr(outputStr, sprintf('C%d',ii), sprintf('data(%d,:)',ii));	end	metCriteria(whichIncCriteria, :) = eq(eval(outputStr),1);% 	metCriteria(whichIncCriteria,:) = eq(eval(incCriteria{whichIncCriteria}),1);	includedData{whichIncCriteria} = zeros(nbColumns, 1);	includedData{whichIncCriteria} = data(:, eq(metCriteria(whichIncCriteria,:),1));endfprintf('Useful statistics:\n\n');for whichIncCriteria = 1:nbIncCriteria,	tempData = includedData{whichIncCriteria};	[nbColumns, nbIncluded] = size(tempData);	fprintf('Inclusion criteria #%d:\n', whichIncCriteria);	fprintf('nbIncluded = %d\n', nbIncluded);	fprintf('Mean =\t\t');	fprintf('%.2f\t', mean(tempData'));	fprintf('\nStd =\t\t');	fprintf('%.2f\t', std(tempData'));	fprintf('\nMedian =\t');	fprintf('%.2f\t', median(tempData'));	fprintf('\nMin =\t\t');	fprintf('%.2f\t', min(tempData'));	fprintf('\nMax =\t\t');	fprintf('%.2f\t', max(tempData'));	fprintf('\n');end%---------------------------------------------------------------%---------------------------------------------------------------function outputStr = replaceStr(inputStr, findThis, changeFor)index = findstr(findThis, inputStr);NN = length(index);m1 = length(findThis);m2 = length(changeFor);inSize = length(inputStr);index(NN+1) = inSize+1;if(index(1)~=1)	outputStr(1:index(1)-1) = inputStr(1:index(1)-1);endfor ii = 1:NN,	jj1 = index(ii);	jj2 = index(ii+1);	temp = inputStr(jj1+m1:jj2-1);	pp = length(temp);	kk = (ii-1) * m2 + (jj1 - (ii - 1) * m1);	outputStr(kk:kk+m2-1) = changeFor;	outputStr(kk+m2:kk+m2+pp-1) = temp;end