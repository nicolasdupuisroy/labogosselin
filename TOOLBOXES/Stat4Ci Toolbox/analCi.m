function Res = analCi(varargin)% ANALCI performs and displays the results of the Pixel and Cluster tests on a 2D classification image.  % 	The first argument must be a Z-scored, unsmoothed classification image (e.g., the output of the % 	buildCi function) and the second argument must be either the sigma of a Gaussian filter (see example) % 	of a range of sigmas of Gaussian filters (e.g., sigma_b = [3:10];).  The other arguments are optional.  % 	The third argument is a p-value (set to .05 by default), the fourth one is a Cluster test threshold % 	(set to 3 by default), the fifth one is a search region (set to the whole classification image by % 	default) and the sixth one is a background image to help read the result (set to a black background % 	by default).  The significant regions are displayed in red.% % 			E.g.,	% 					ZCi = randn(256, 256);% 					ZCi(101:120, 101:120) = ZCi(101:120, 101:120) + ones(20, 20); % 					sigma_b = 3;% 					p = .05;% 					Res = analCi(ZCi, sigma_b, p);% % Requires the ImageProcessing Toolbox.% % See also SMOOTHCI, EXPECTEDSCI, STATRESH, and DISPLAYRES% % The Stat4Ci toolbox is free (http://mapageweb.umontreal.ca/gosselif/stat4ci.html); if you use % it in your research, please, cite us:%	Chauvin, A., Worsley, K. J., Schyns, P. G., Arguin, M. & Gosselin, F. (2005).  Accurate %	statistical tests for smooth classification images.% % Frédéric Gosselin (frederic.gosselin@umontreal.ca), 26/05/2006if nargin == 2,	ZCi = varargin{1};	sigma_b = varargin{2};	p = .05;	tC = 3;	S_r = ones(size(ZCi));	background = S_r;elseif nargin == 3,	ZCi = varargin{1};	sigma_b = varargin{2};	p = varargin{3};	tC = 3;	S_r = ones(size(ZCi));	background = S_r;elseif nargin == 4,	ZCi = varargin{1};	sigma_b = varargin{2};	p = varargin{3};	tC = varargin{4};	S_r = ones(size(ZCi));	background = S_r;elseif nargin == 5,	ZCi = varargin{1};	sigma_b = varargin{2};	p = varargin{3};	tC = varargin{4};	S_r = varargin{5};	background = S_r;elseif nargin == 6,	ZCi = varargin{1};	sigma_b = varargin{2};	p = varargin{3};	tC = varargin{4};	S_r = varargin{5};	background = varargin{6};else	error('Incorrect number of arguments.');end% must be changed for % Res = StatThresh(ZSCi, p, sigma_b, tC, S_r);FWHM = HalfMax(sigma_b);		% computes the full width half maximumD = length(size(S_r)); 					% number of dimensions in the search space[volumes, N] = CiVol(sum(S_r(:)), D) 	% computes the intrinsic volumes[tP, k] = stat_threshold(volumes, N, FWHM, Inf, p, tC);	 % the actual statistical tests% [SCi, kernel] = smoothCi(ZCi, sigma_b);% [SCiMean, SCiStd] = ExpectedSCi(0, 1, {1}, kernel);% ZSCi = (SCi - SCiMean) / SCiStd;% Res.ZSCi = ZSCi;% Res.tP = tP;% Res.p = p;% Res.tC = tC;% Res.k = k;% Res.FWHM = FWHM;% Res = DisplayRes(Res, background);Res = 1;