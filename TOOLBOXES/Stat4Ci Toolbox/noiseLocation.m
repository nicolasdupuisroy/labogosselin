function out = noiseLocation(varargin)global gloparif (nargin >2),	error('Too many input arguments.');endif (length(glopar)~=2 & length(glopar)~=3),	s1 = sprintf('glopar{1} = size along the X AND Y axis\nglopar{2} = std of one bubble\n');	s2 = sprintf('Must be defined in the CID.\nglopar{3} = can keep track of the seed.');	error([s1,s2]);	endoneTrial = varargin{1};if oneTrial(1) ~= -99,	rand('state', oneTrial(1));else	rand('state', glopar{3});	endxSize = glopar{1}(1);ySize = glopar{1}(2);theNoise = cell(1);theNoise{1} = zeros(ySize, xSize);zeros(ySize, xSize);tempRand = rand(ySize, xSize);for jj = 1:oneTrial(2),	[scrap xMax]=max(max(tempRand));	[scrap yMax]=max(tempRand(:,xMax));	theNoise{1}(yMax,xMax)=theNoise{1}(yMax,xMax)+1;	tempRand(yMax,xMax)=0;endglopar{3} = rand('state');if (nargin == 1)	out = theNoise;	return;end;anImage = varargin{2};stdev = glopar{2};nZero = 3;maxHalfSize = round(stdev * nZero);gauss = zeros(2*maxHalfSize,2*maxHalfSize);[y,x] = meshgrid(-maxHalfSize:maxHalfSize,-maxHalfSize:maxHalfSize);gauss = exp(-(x.^2/stdev^2)-(y.^2/stdev^2));gauss = gauss/max(gauss(:));clear x, y;winPlane = zeros(ySize,xSize);stimulus = zeros(ySize,xSize);tempPlane = zeros(ySize+maxHalfSize-1,xSize+maxHalfSize-1);tempPlane = real(ifft2(fft2(gauss,ySize+maxHalfSize-1,xSize+maxHalfSize-1).*fft2(theNoise{1}, ySize+maxHalfSize-1, xSize+maxHalfSize-1)));winPlane = min(tempPlane(maxHalfSize:ySize+maxHalfSize-1,maxHalfSize:xSize+maxHalfSize-1), 1);stimulus = uint8(round(winPlane.*(double(anImage)-128))+128);out = stimulus;