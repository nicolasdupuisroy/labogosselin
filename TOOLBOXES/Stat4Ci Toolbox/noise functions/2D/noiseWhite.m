function varargout = noiseWhite(varargin)global gloparif (length(glopar)~=2 | length(glopar)~=3)	s1 = sprintf('glopar(1) = size along the X and Y axis\nglopar(2) = signal-to-noise ratio\n'));	s2 = sprintf('Must be defined in the CID.\nglopar{3} = information about the stimulus: bits, min and max\n');	error([s1,s2]);	endoneTrial = varargin{1};rand('state', oneTrial(1));xSize = glopar{1}(1);ySize = glopar{1}(2);theNoise = randn(ySize, xSize);theNoise = min(max(theNoise / (2*2.33), -.5), .5);if (nargin == 1)	varargout{1} = theNoise;	returnend;s2n = glopar{2};anImage = double(varargin{2});anImage = (anImage - min(anImage(:))) / (max(anImage(:)) - min(anImage(:)));nrj_Im = sum(sum( (anImage-.5).^2 ));nrj_Noi = sum(sum( theNoise.^2 ));S_N = 10*log10(nrj_Im/nrj_Noi)theStimulus = uint8(255*(anImage + theNoise / noiseControl * S_N));mmin = min(stimulus(:))/256;mmax = max(stimulus(:))/256; % we suppose that (1) images are scaled beetween 0 and 256 and (2) we used 256 gray level, i.e. max bits = 8bits = log2(floor((mmax-mmin)*256));glopar{3}(1) = bits;glopar{3}(2) = mmin;glopar{3}(3) = mmax;varargout{1} = theStimulus;