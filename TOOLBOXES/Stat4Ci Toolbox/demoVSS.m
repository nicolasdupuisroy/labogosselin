% Build a PCIDnoise = 'noiseLocation.m';constants = 'glopar{1}=[256, 256];glopar{2}=10';data = MAKEDATA([20, 25]);data(4, :) = 2; data(4, lt(data(2, :), 11)) = 1;data(3:5,:) = data(2:4,:);MAKECID('demo2.pcid', noise, constants, data);clear all% Use a PCID to create an imagecid = READCID('demo2.pcid');theStimulus = MAKETHENOISE([1 20], IMREAD('w1N.JPG'));theStimulus = NOISELOCATION([1 20], IMREAD('w1N.JPG'));% figure, IMSHOW(theNoise)figure, IMSHOW(theStimulus)% A complete experimentclear allcid = READCID('demo2.pcid');eval(cid.constants)imageList = LOADLISTOFIMAGES('an_image_list.txt');maxBubbles = 40; guess = 12; target = .75;q = INITQUEST(guess/maxBubbles, target);window = INITSCREEN;possKeys = 'as'; codeKeys = [1, 2];for trial = 1:nbTrials,		anImage = IMREAD(imageList{cid.data(3, trial)});		cid.data(2, trial) = round(maxBubbles * QUESTMEAN(q));		aStimulus = MAKETHENOISE(cid.data(:,trial), anImage);		[cid.data(end-1, trial), cid.data(end, trial)] = SHOWNREC(window, aStimulus, possKeys);		cid.data(end-2, trial) = CHECKRESP(cid.data(end-1, trial), possKeys, codeKeys, cid.data(4, trial));		q = QUESTUPDATE(q, QUESTMEAN(q), cid.data(end-2, trial));endSCREEN closeallMAKECID('demo2.cid', cid);% Construct classification imagesclear allcid = READCID('demo2.cid');incCriteria{1} = '1==1';cid.data(5,:) = cid.data(5,:) * 2 - 1;cid.data(7,:) = - (log(cid.data(7,:)) - mean(log(cid.data(7,:))));metCriteria = DATASTAT(cid, incCriteria);predVar = [5, 7];[Ci, nbIncluded] = BUILDCI(cid, predVar, incCriteria);% save 'demo2.mat' Ci nbIncluded % Smooth and transform in Z-scores clear all% load 'demo.mat'sigma = 8;p = .05;	%p-valuetC = 2.7; 	%threshold (for Cluster test)S_r = STRETCH(double(imread('faceMask.tif')));SCi = SMOOTHCI(Ci(:,:,1), sigma);figure, SHOWIM(S_r)vecSCi = SCi(eq(S_r, 0));ZSCi = ZTRANSSCI(SCi, MEAN(vecSCi(:)), STD(vecSCi(:)));ZSCi = ZSCi .* S_r;figure, SHOWIM(ZSCi)Res = STATTHRESH(ZSCi, p, sigma, tC, S_r);tCi = DISPLAYRES(Res, IMREAD('w1N.JPG'));